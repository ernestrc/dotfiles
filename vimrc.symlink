" PLUGINS

call plug#begin('~/.vim/plugged')
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/rbgrouleff/bclose.vim.git'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mhinz/vim-signify'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" snippets start
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
" snippets end

call plug#end()


" SETTINGS

set foldmethod=indent
set foldlevel=99
syntax enable
filetype plugin indent on
set number
set hlsearch
set directory=/tmp
set backupdir=/tmp
set undodir=/tmp
set signcolumn=yes
set updatetime=300
set exrc
"set encoding=UTF8
set secure
set hidden
set copyindent
set history=1000
set undolevels=1000
set wildignore+=*.swp,*.bak,*.pyc,*.class
set scrolloff=3
set autoindent
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile
set clipboard=unnamedplus
set go+=a
set tags=./tags,tags,../tags
set switchbuf=usetab
set nofoldenable
set nowrap
set softtabstop=4
set tabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set autowrite
set completeopt=menu
set mouse=a

" COLORS
if $VBG == "light"
	colorscheme default
else
	colorscheme torte
endif
" hi SpellBad	cterm=NONE ctermfg=grey ctermbg=blue
" highlight SpellBad cterm=NONE ctermfg=grey ctermbg=blue
" hi SpellCap	word not capitalised			|hl-SpellCap|
" hi SpellRare	rare word				|hl-SpellRare|
" hi SpellLocal	wrong spelling for selected region	|hl-SpellLocal|
highlight LineNr ctermfg=darkgrey ctermbg=None
" highlight LineNr ctermfg=darkgrey ctermbg=None
" highlight Normal ctermbg=none
" highlight NonText ctermbg=none


" MAPPINGS

nnoremap <M-j> <c-w>j
nnoremap <M-k> <c-w>k
nnoremap <M-l> <c-w>l
nnoremap <M-h> <c-w>h
nnoremap ,v <C-w>v
nnoremap ,h <C-w>s
nnoremap <C-h> :bprevious<CR>
nnoremap <C-l> :bn<CR>
nnoremap <C-a> :bufdo bd<CR>
noremap <C-q> :q!<CR>
inoremap <C-@> <C-x><C-o>
inoremap <C-SPACE> <C-x><C-o>
noremap <space> @q
nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
nnoremap <silent> <C-w> :lclose<CR>:Bclose<CR>

let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
let $FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

" snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:NERDTreeWinSize=30

let g:gitgutter_enabled = 1


" PLUGIN MAPPINGS
"
nnoremap <C-p> :Files<CR>
nnoremap <C-t> :Tags<CR>
nnoremap <C-e> :History<CR>
nnoremap <C-\> :Ag<CR>
noremap <C-q> :q!<CR>

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='distinguished'

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-i>"
let g:UltiSnipsJumpBackwardTrigger="<c-o>"

let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_tags_command = 'make tags'
let g:fzf_buffers_jump = 1


" ALE
let g:ale_completion_enabled = 1
" set omnifunc=ale#completion#OmniFunc

" let g:ale_linters = {'go': ['golangci-lint', 'golangserver']}
let g:ale_fix_on_save = 1
let g:ale_go_golangci_lint_options = '--fast -D typecheck'

let g:ale_go_langserver_executable = 'gopls'

"let g:ale_go_staticcheck_lint_package = 1
" let g:ale_go_golangci_lint_executable = ''
"
let g:airline#extensions#ale#enabled = 1
" let g:ale_go_golangci_lint_options = ['--enable-all', '-D', 'lll']
" let g:ale_go_golangci_lint_package = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0
" let g:ale_lint_delay = 500


nmap gd :ALEGoToDefinition<cr>
nmap <c-]> :ALEGoToDefinition<cr>
" au FileType go nmap dg :GoDefPop<cr>
" au FileType go nmap <c-t> :GoDefPop<cr>
