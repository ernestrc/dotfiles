map <C-p> :CtrlP<CR>,V
unmap! <C-p>,V
<C-e> :NERDTreeToggle<CR>,v
map <Tab> :NERDTreeToggle<CR>,V
let g:ctrlp_map = '<c-p>'let g:ctrlp_cmd = 'CtrlP',v
let g:ctrlp_cmd = 'CtrlP',V
let g:ctrlp_map = '<c-p>',V
,V
t,v
        def create(user:User) = println("creating user: "+ user),V
t,V
    val x = new UserServiceComponent(,V
username,password),v
    def create(user: User) = println("creating user: " + user),V
ec2-54-72-130-254.eu-west-1.compute.amazonaws.com,v
git@github.com:derekwyatt/vim-scala.git,v
this: UsersDaoComponent =>    def doSomethingElse() = println("whateverDifferent"),v
/** * Created by ernestrc on 11/04/2014. */trait UsersDaotrait ComponentThatProvidesAnA {  val a:UsersDao}trait ComponentThatProvidesAnAByUsingSlickLibrary extends ComponentThatProvidesAnA{  this:ComponentThatProvidesB with ComponentThatProvidesAnEmailer =>  class ImplementationOfUsersDaoUsingSlick extends {    b.doSomething()    c.toString  }}trait CompaniesDao{  def doSomething()}trait ComponentThatProvidesB {  val b:CompaniesDao}trait Implementation1OfComponentCompaniesDao extends ComponentThatProvidesB{  this:ComponentThatProvidesAnA =>    class ImplementationOfCompaniesDaoUsingSlick extends CompaniesDao{    def doSomething(){}  }}trait Emailer{}trait ComponentThatProvidesAnEmailer{  val c:Emailer}trait ComponentThatProvidesCUsingAmazonEmail extends ComponentThatProvidesAnEmailer{  class ImplementationOfCUsingAmazonEmail extends Emailer{  }}object Bootstrap extends ComponentThatProvidesAnAByUsingSlickLibrary with ComponentThatProvidesCUsingAmazonEmail with ComponentThatProvidesAnAByUsingSlickLibrary{  override val c: Emailer = new ImplementationOfCUsingAmazonEmail  override val b: CompaniesDao = new Imple  val a:A = new A},v
http://ec2-54-72-174-151.eu-west-1.compute.amazonaws.com/,v
http://ec2-54-72-174-151.eu-west-1.compute.amazonaws.com:8080/nexus,v
was refused by the server: Unauthorized,v
http://ec2-54-72-174-151.eu-west-1.compute.amazonaws.com:8080/nexus,V
realm="Sonatype Nexus Repository Manager",v
refused by the server: Unauthorized,v
realm=Sonatype Nexus Repository Managerhost=nexus.scala-tools.orguser=adminpassword=admin123,v
function roomdb,V
{,V
},V
    mysql -u ernestrc -p -h 54.72.202.120,V
    ec2stop i-039d6e41,V
    ec2start i-73828432,V
    ec2stop i-73828432,V
sudo cp nexus-2.0.3.war /var/lib/tomcat6/webapps/nexus.war,V
/usr/share/tomcat6/bin/catalina.sh ,v
54.72.174.151,v
  //the project with the database access and network serialisation layer  lazy val dao = Project(id = "room-backend-dao", base = file("dao")),v
libraryDependencies ++= Seq(  "joda-time"                       % "joda-time"       % "2.3",  "com.ibm.icu"                     % "icu4j"           % "51.1",  "org.joda"                        % "joda-convert"    % "1.3.1",  "com.googlecode.libphonenumber"   % "libphonenumber"  % "5.6",  "io.spray"                        %% "spray-json"     % "1.2.5",  "com.typesafe"                    % "config"          % "1.0.2",  "ch.qos.logback"                  % "logback-classic" % "1.0.13",  "org.scalacheck"                  %% "scalacheck"     % "1.10.1" % "test",  "junit"                           % "junit"           % "4.7" % "test",  "com.novocode"                    % "junit-interface" % "0.7" % "test->default",  "org.specs2"                      %% "specs2"         % "2.2" % "test",  "org.mockito" % "mockito-all"     % "1.9.0"           % "test"),v
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.6.0"),V
import com.typesafe.config.{ConfigFactory, Config},V
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.6.0"),v
addSbtPlugin(",V
git@github.com:slick/slick-examples.git,v
targetproject/target.idea.idea_modules.DS_Store*.iml,v
resolvers += "spray repo" at "http://repo.spray.io" // not needed for sbt >= 0.12,V
com.github.mpeltonen,v
  unmanagedClasspath,V
publishArtifact in Test in ThisBuild := false,V
publishMavenStyle in ThisBuild:= true,V
testOptions in Test in ThisBuild += Tests.Argument(TestFrameworks.Specs2, "junitxml", "console"),V
  "Everreach Snapshots" at "http://ec2-54-229-115-100.eu-west-1.compute.amazonaws.com:9090/nexus/content/repositories/snapshots/",V
  "Everreach Releases" at "http://ec2-54-229-115-100.eu-west-1.compute.amazonaws.com:9090/nexus/content/repositories/releases/",,V
  "Everreach Third Party" at "http://ec2-54-229-115-100.eu-west-1.compute.amazonaws.com:9090/nexus/content/repositories/thirdparty",,V
  "Sonatype Releases" at "http://oss.sonatype.org/content/repositories/releases",,V
  "Sonatype Snapshots" at "http://oss.sonatype.org/content/repositories/snapshots",,V
  "-unchecked",,V
  "-deprecation",,V
  "-Xlint",,V
  "-Ywarn-dead-code",,V
  "-language:_",,V
  "-target:jvm-1.6",,V
addSbtPlugin("io.spray" % "sbt-twirl" % "0.6.1"),V
addSbtPlugin("com.typesafe.sbt" % "sbt-atmos" % "0.3.2"),V
addSbtPlugin("com.typesafe.sbt" % "sbt-native-packager" % "0.6.2"),V
addSbtPlugin("net.virtual-void" % "sbt-dependency-graph" % "0.7.4"),V
addSbtPlugin("com.earldouglas" % "xsbt-web-plugin" % "0.3.0"),V
addSbtPlugin("com.typesafe.akka" % "akka-sbt-plugin" % "2.2.1"),V
addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "0.9.2"),V
 addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.5.2"),v
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.5.2"),V
scalaVersion := "2.10.4",V
appName,,v
  val appName         = "Room.app",V
  val main = Project(appName, file(".")).aggregate(dao),V
  val dao = Project("room_dao", file("room_dao")),V
  //the project with the domain model and the common routines,V
  //val core = Project("everreach_core", file("everreach_core")),V
   // .settings(net.virtualvoid.sbt.graph.Plugin.graphSettings: _*),V
pomIncludeRepository in ThisBuild := { x => false },V
[error] java.lang.ExceptionInInitializerError,v
    .dependsOn(service % "compile->compile;test->test"),V
    .settings(net.virtualvoid.sbt.graph.Plugin.graphSettings: _*),V
  val api = Project("everreach_api", file("everreach_api")),V
    .dependsOn(dao  % "compile->compile;test->test"),V
  val service = Project("everreach_service", file("everreach_service")),V
    .dependsOn(core % "compile->compile;test->test"),V
  val core = Project("everreach_core", file("everreach_core")),V
//addSbtPlugin("no.arktekk.sbt" % "aether-deploy" % "0.10"),V
//addSbtPlugin("com.typesafe.sbt" % "sbt-pgp" % "0.8.1"),V
//addSbtPlugin("com.github.gseitz" % "sbt-release" % "0.8"),V
credentials in ThisBuild += Credentials(new File(sys.env.get("EVERREACH_NEXUS_CREDENTIALS").getOrElse("/etc/everreach/nexus.credentials"))),V
  else Some("Everreach releases" at nexus + "releases"),V
  if (v.trim.endsWith("SNAPSHOT")) Some("Everreach snapshots" at nexus + "snapshots"),V
  val nexus = "http://ec2-54-229-115-100.eu-west-1.compute.amazonaws.com:9090/nexus/content/repositories/",V
publishTo in ThisBuild <<= version { (v: String) =>,V
everr",v
ach,v
e,v
libraryDependencies ++= List(  "com.typesafe.slick" %% "slick" % "2.0.0",  "org.slf4j" % "slf4j-nop" % "1.6.4",  "com.h2database" % "h2" % "1.3.170",  "org.scalatest" %% "scalatest" % "2.0",v
  "Everreach Snapshots" at "http://ec2-s4-229-115-100.eu-west-1.compute.amazonaws.com:9090/nexus/content/repositories/snapshots/",V
5,v
