#!/usr/bin/env python
"""
Import and clean a CSV to a defined mongodb instance
"""
import csv
from pymongo import MongoClient

# File to import. Full path required
FILE = '/Users/ernestrc/dev/udacity/data_wrangling/datasets/cities.csv'
DB = 'udacity'
COLLECTION = 'cities'
HOST = 'mongodb://localhost:27017/'
CLEAN_ID = True #remove id field from csv dataset
DROP_PREVIOUS = True #drop previous collection named $COLLECTION
CLEAN_URLS = False #If value is a URL, get the last '/$STR'
CLEAN_NULL = True #clean 'NULL' or empty values
MULTIPLE_TO_ARRAY = True #If field has multiple values, create array, otherwise pick value with more information

def eval_row(keys,values):
    document = {}
    for i, value in enumerate(values):
        document[keys[i]] = value
    return document

def load_collection():
    collection = []
    with open(FILE,'rb') as f:
        reader = csv.reader(f)
        row_count = 0
        keys = []

        for row in reader:
            if row_count == 0:
                keys = row
            else:
                document = eval_row(keys,row)
                collection.append(document)
            row_count += 1
    return collection

def clean_collection(d):

    for i,doc in enumerate(d):
        for k, v in doc.items():

            #lower_case str and no empty spaces
            if type(v) == str:
                d[i][k] = v.lower().strip()

            #homogenize nulls/empty
            if type(v) == str and ( v.upper() == 'NULL' or v == ''):
                d[i][k] = None

            #clean nulls
            if CLEAN_NULL is True and d[i][k] == None:
                d[i].pop(k)
                continue

            #Clean _id values
            if CLEAN_ID is True and (k == '_id' or k == u'_id'):
                d[i].pop('_id')

            #clean double values
            if type(v) is str and v.startswith('{') and MULTIPLE_TO_ARRAY is False:
                vals = v.strip('}').strip('{').split('|')
                maxv = ''
                for val in vals:
                    if len(val) > len(maxv):
                        maxv = val
                d[i][k] = maxv
            elif type(v) is str and v.startswith('{'):
                d[i][k] = v.strip('}').strip('{').split('|')

            #Clean values with urls
            if CLEAN_URLS is True and type(v) == str \
            and v.startswith('http'):
                idx = v.rindex('/') + 1
                d[i][k] = v[idx:].lower()

    return d


def insert_collection(d):
    inserted = 0
    if type(d) != list and type(d[0]) != dict:
        raise Exception("There was a problem on the parsing function".format(type(d)))
    client = MongoClient(HOST)
    db = client[DB]
    collection = db[COLLECTION]

    if DROP_PREVIOUS is True:
        try:
            collection.drop()
            print "Succesfully dropped previous collection"
        except Exception as e:
            print "Could not drop previous collection with name {} in db {} in host {}. Reason:{}".format(COLLECTION,DB,HOST,e)

    UUID = 10000
    for doc in d:

        if CLEAN_ID is True:
            doc['_id'] = UUID
            UUID += 1

        collection.insert(doc)
        inserted += 1

    current = collection.find().count()

    return inserted, current


if __name__ == '__main__':
    loaded = load_collection()
    cleaned = clean_collection(loaded)
    inserted, current = insert_collection(cleaned)
    print "Successfully inserted csv[{}] to mongodb in host -> {}; db -> {}; collection -> {};".format(FILE,HOST,DB,COLLECTION)
    print "Inserted {} documents".format(inserted)
    print "There are {} number of documents in the collection now".format(current)


